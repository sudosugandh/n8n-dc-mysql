----------------------------------------------------------------------------
Update and install MySQL  Server & Configure database.
-------------------------------------------------------------------------------------
sudo apt-get update  && upgrade -y
sudo wget https://dev.mysql.com/get/mysql-apt-config_0.8.32-1_all.deb
sudo apt install gnupg
sudo apt update
sudo dpkg -i mysql-apt-config_0.8.32-1_all.deb
sudo apt update 
sudo apt install mysql-server -y
sudo apt update

sudo systemctl restart mysql
mysql -u root -p 
create database db;
CREATE USER 'magento'@'localhost' IDENTIFIED BY 'm2n1shlko';
GRANT ALL PRIVILEGES ON db.* TO 'magento'@'localhost';
GRANT SUPER ON *.* TO 'magento'@'localhost';

apt-get install software-properties-common
------------------------------------------------------------------
Install elasticsearch 
--------------------------------------------------------------------

cd /opt/
wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.6.1-amd64.deb
dpkg -i elasticsearch-7.6.1-amd64.deb
curl -XGET 'http://localhost:9200'

------------------------------------------------------------------------------
Install PHP, PHP-FPM, & php.ini tuning.
------------------------------------------------------------------------------
sudo apt install lsb-release ca-certificates apt-transport-https -y
sudo curl -sSL https://packages.sury.org/php/README.txt | sudo bash -

sudo apt install php8.1-fpm php8.1-common php8.1-mysql php8.1-gmp php8.1-curl php8.1-soap php8.1-intl php8.1-mbstring php8.1-xmlrpc php8.1-gd php8.1-xml php8.1-cli php8.1-zip php8.1-bcmath -y
sudo apt update

Note : now here we have to tuning php ini & cli file 

sudo nano /etc/php/8.1/fpm/php.ini


Change the following settings:
file_uploads = On
allow_url_fopen = On
short_open_tag = On
memory_limit = 256M
cgi.fix_pathinfo = 0
zlib.output_compression = On
upload_max_filesize = 128M
max_execution_time = 600
max_input_time = 900
date.timezone = America/Chicago

------------------------------------------------
Configure VitualHost fro 80
------------------------------------------------

nano /etc/nginx/sites-available/test.mgt.com.conf

upstream fastcgi_backend {
server unix:/run/php/php8.1-fpm.sock;
}
server {
server_name test.mgt.com;
listen 80;
set $MAGE_ROOT /var/www/ecommerce;
include /var/www/ecommerce/nginx.conf.sample;
}

---------------------------------------------------------------------------------------
Follow these steps to install magento, composer, and change admin url.
---------------------------------------------------------------------------------------
sudo mkdir -p  /var/www/ecommerce

git clone https://github.com/magento/magento2.git /var/www/ecommerce/
curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/bin --filename=composer
cd /var/www/ecommerce
composer install --ignore-platform-reqs

 bin/magento setup:install --base-url=http://test.mgt.com --db-host=localhost --db-name=db --db-user=magento --db-password=strongpassword --admin-firstname=FirstName --admin-lastname=LastName --admin-email=your@emailaddress.com --admin-user=magentoadmin --admin-password=m2n1shlko --language=en_US --currency=USD --timezone=America/Chicago --use-rewrites=1

Note : copy the Admin URI (we can change this url through go inside /var/www/ecommerce/ and sudo nano app/etc/env.php).
change 'frontName' => 'admin_1k4pc0' to a dmin  and whatever you want.

-----------------------------------------------------------------------------------------------
Install & configure sample Data on Magento2
------------------------------------------------------------------------------------------------
cd /var/www/
sudo git clone https://github.com/magento/magento2-sample-data.git

-----------------------------------------------------------------------------------------------
Go inside the ecommerce directory assign some important persmision, make sure to perform these steps as root.
-----------------------------------------------------------------------------------------------
chown -R www-data:www-data /var/www/ecommerce/
find var generated vendor pub/static pub/media app/etc -type f -exec chmod g+w {} +
find var generated vendor pub/static pub/media app/etc -type d -exec chmod g+ws {} +
chmod -R 777 var pub

--------------------------------------------------------------------------------------------------
Now deploy the sample data on magento site.
---------------------------------------------------------------------------------------------------
php -f /var/www/magento2-sample-data/dev/tools/build-sample-data.php -- --ce-source=/var/www/ecommerce

php bin/magento setup:upgrade
bin/magento setup:di:compile
bin/magento setup:db-data:upgrade


Generate Self Signed SSL Certificate.
Step 1 â€” Creating the TLS Certificate
sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/nginx-selfsigned.key -out /etc/ssl/certs/nginx-selfsigned.crt
sudo openssl dhparam -out /etc/nginx/dhparam.pem 2048

--------------------------------------------------------------------------------------------------------
Craete a file  /etc/nginx/snippets/self-signed.conf,  paste the following things.
----------------------------------------------------------------------------------------------------
sudo nano /etc/nginx/snippets/self-signed.conf
ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;
ssl_certificate_key /etc/ssl/private/nginx-selfsigned.key;

---------------------------------------------------------------------------------------------------
Craete a file  /etc/nginx/snippets/ssl-params.conf,  paste the following things.
-----------------------------------------------------------------------------------------------------
sudo nano /etc/nginx/snippets/ssl-params.conf
ssl_protocols TLSv1.3;
ssl_prefer_server_ciphers on;
ssl_dhparam /etc/nginx/dhparam.pem; 
ssl_ciphers EECDH+AESGCM:EDH+AESGCM;
ssl_ecdh_curve secp384r1;
ssl_session_timeout  10m;
ssl_session_cache shared:SSL:10m;
ssl_session_tickets off;
ssl_stapling on;
ssl_stapling_verify on;
resolver 8.8.8.8 8.8.4.4 valid=300s;
resolver_timeout 5s;
# Disable strict transport security for now. You can uncomment the following
# line if you understand the implications.
#add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload";
add_header X-Frame-Options DENY;
add_header X-Content-Type-Options nosniff;
add_header X-XSS-Protection "1; mode=block";

------------------------------------------------------------------------------------------------------------------------------------------
Now configure Self Signed SSL certificate for test.mgt.com, Just paste this configure after  close 80 vhost block
------------------------------------------------------------------------------------------------------------------------------------------

/etc/nginx/sites-available/test.mgt.com.conf


server {
    listen 443 ssl;
    listen [::]:443 ssl;
    include snippets/self-signed.conf;
    include snippets/ssl-params.conf;

    set $MAGE_ROOT /var/www/ecommerce;
    include /var/www/ecommerce/nginx.conf.sample;

}
--------------------------------------------------
Check the systax, and restart the service
--------------------------------------------------
sudo nginx -t 
sudo  systemctl restart  nginx

--------------------------------------------------------------------
Now reinstall the magento2 with the https and local domain.
--------------------------------------------------------------------

 bin/magento setup:install --base-url=https://test.mgt.com --db-host=localhost --db-name=db --db-user=magento --db-password=m2n1shlko --admin-firstname=FirstName --admin-lastname=LastName --admin-email=your@emailaddress.com --admin-user=magentoadmin --admin-password=m2n1shlko --language=en_US --currency=USD --timezone=America/Chicago --use-rewrites=1

https://test.mgt.com/
https://test.mgt.com/admin

----------------------------------------------------------------------------------------------------------
Install redis-server and configure, and peform following command  inside the ecommerce(magento directory.)
-----------------------------------------------------------------------------------------------------------
sudo apt install redis-server -y
sudo apt update  
sudo systemctl start redis
sudo systemctl enable redis

cd /var/www/ecommerce

bin/magento setup:config:set \
    --cache-backend=redis \
    --cache-backend-redis-server=127.0.0.1 \
    --cache-backend-redis-db=1 \
    --skip-db-validation

------------------------------------------------------------
Output something like  this
----------------------------------------------------------------
Current status:
                        config: 1
                        layout: 1
                    block_html: 1
                   collections: 1
                    reflection: 1
                        db_ddl: 1
               compiled_config: 1
                           eav: 1
         customer_notification: 1
 graphql_query_resolver_result: 1
            config_integration: 1
        config_integration_api: 1
                     full_page: 1
             config_webservice: 1
                     translate: 1

bin/magento cache:flush
bin/magento cache:status


bin/magento setup:upgrade
bin/magento setup:di:compile
bin/magento cache:flush

----------------------------------------------------------------------
Configure Varnish cache 
----------------------------------------------------------------------


Nginx should be listening on port 8080:
Varnish should run on  port 80:

Summary:
Varnish on port 80.
Nginx (Magento) on port 8080 or any other port (not 80).

sudo apt update
sudo apt install varnish -y
--------------------------------------------------------------------------------------------------------------------------
Now modified the systemctl file of varnish.service,  change  port 6081, 6082 to 80 and save it. 
--------------------------------------------------------------------------------------------------------------------------

sudo nano /etc/systemd/system/varnish.service

-a :80

sudo systemctl daemon-reload
sudo systemctl restart varnish
--------------------------------------------------
sudo nano /etc/varnish/default.vcl
-----------------------------------------------------
backend default {
    .host = "127.0.0.1";
    .port = "8080"; 
---------------------------------------------------------------------------------------

Now go to magento admin panel, 
Go to the Stores   ----> Under the Settings section, click Configuration

In the Configuration panel:  Under Advanced, click on System ---> Expand the Full Page Cache section -------> Change the Caching Application dropdown to Varnish Cache

And save the configuration.

php bin/magento cache:flush










